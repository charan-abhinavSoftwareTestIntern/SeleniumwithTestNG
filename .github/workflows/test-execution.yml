on:
  workflow_dispatch:
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          echo "Chrome Version: $(google-chrome --version)"

      - name: Install ChromeDriver (Matching Version)
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          
          if [[ -z "$CHROMEDRIVER_VERSION" ]]; then
            echo "Failed to get ChromeDriver version, using latest version instead."
            CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
          fi
          
          echo "Downloading ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip" -O chromedriver.zip
          unzip chromedriver.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          echo "ChromeDriver Version: $(chromedriver --version)"

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run Tests with Maven
        id: test_execution
        run: |
          mvn clean test || echo "TEST_FAILED=true" >> $GITHUB_ENV

      - name: Extract Test Results
        run: |
          PASSED=$(grep -oP '(?<=Tests run: )\d+' target/surefire-reports/testng-results.xml | awk '{s+=$1} END {print s}')
          FAILED=$(grep -oP '(?<=Failures: )\d+' target/surefire-reports/testng-results.xml | awk '{s+=$1} END {print s}')
          SKIPPED=$(grep -oP '(?<=Skipped: )\d+' target/surefire-reports/testng-results.xml | awk '{s+=$1} END {print s}')
          TOTAL=$((PASSED + FAILED + SKIPPED))

          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV

      - name: Generate and Upload Allure Report
        run: mvn allure:report || echo "Allure report generation failed!"

      - name: Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-results

      # **Ensure Email Notification is Always Sent**
      - name: Send Email Notification
        if: always()
        run: |
          SUBJECT="📝 TestNG Suite Execution Summary"
          BODY="📊 Test Suite Execution Summary:\n✅ Passed: $PASSED\n❌ Failed: $FAILED\n⚠️ Skipped: $SKIPPED\n📌 Total: $TOTAL\n🔗 Allure Report: Attachments Included"

          echo -e "Subject: $SUBJECT\n\n$BODY" | sendmail -t \
            -S ${{ secrets.SMTP_SERVER }} \
            -p ${{ secrets.SMTP_PORT }} \
            -au ${{ secrets.EMAIL_USERNAME }} \
            -ap ${{ secrets.EMAIL_PASSWORD }} \
            charanabhinav.pydimarri@optimworks.com

      # **Ensure Google Chat Notification is Always Sent**
      - name: Send Google Chat Notification
        if: always()
        run: |
          CHAT_MESSAGE="📊 Test Suite Execution Summary:\\n✅ Passed: $PASSED\\n❌ Failed: $FAILED\\n⚠️ Skipped: $SKIPPED\\n📌 Total: $TOTAL\\n🔗 Allure Report: Attachments Included"

          echo "Sending Google Chat notification..."
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"$CHAT_MESSAGE\"}" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK }}"
