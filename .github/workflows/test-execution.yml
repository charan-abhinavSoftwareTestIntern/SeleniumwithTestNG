on:
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          echo "Chrome Version: $(google-chrome --version)"

      - name: Install ChromeDriver (Matching Version)
        run: |
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | jq -r ".channels.Stable.version")
          DOWNLOAD_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | jq -r ".channels.Stable.downloads.chromedriver[] | select(.platform == \"linux64\").url")

          if [[ -z "$DOWNLOAD_URL" ]]; then
            echo "ChromeDriver download URL not found!"
            exit 1
          fi

          echo "Downloading ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -q "$DOWNLOAD_URL" -O chromedriver-linux64.zip
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          echo "ChromeDriver Version: $(chromedriver --version)"

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run Tests with Maven
        id: test_execution
        run: |
          mvn clean test || echo "TEST_FAILED=true" >> $GITHUB_ENV

      - name: Extract Test Results
        run: |
          if [[ -f target/surefire-reports/testng-results.xml ]]; then
            PASSED=$(grep -oP '(?<=<passed>).*(?=</passed>)' target/surefire-reports/testng-results.xml | awk '{s+=$1} END {print s}')
            FAILED=$(grep -oP '(?<=<failed>).*(?=</failed>)' target/surefire-reports/testng-results.xml | awk '{s+=$1} END {print s}')
            SKIPPED=$(grep -oP '(?<=<skipped>).*(?=</skipped>)' target/surefire-reports/testng-results.xml | awk '{s+=$1} END {print s}')
            TOTAL=$((PASSED + FAILED + SKIPPED))
          else
            PASSED=0
            FAILED=0
            SKIPPED=0
            TOTAL=0
          fi
          
          echo "PASSED=${PASSED:-0}" >> $GITHUB_ENV
          echo "FAILED=${FAILED:-0}" >> $GITHUB_ENV
          echo "SKIPPED=${SKIPPED:-0}" >> $GITHUB_ENV
          echo "TOTAL=${TOTAL:-0}" >> $GITHUB_ENV

      - name: Generate and Upload Allure Report
        run: mvn allure:report || echo "Allure report generation failed!"

      - name: Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-results

      - name: Install Mail Utilities
        run: sudo apt-get install -y mailutils

      - name: Send Email Notification
        if: always()
        run: |
          echo "PASSED=$PASSED, FAILED=$FAILED, SKIPPED=$SKIPPED, TOTAL=$TOTAL"

          SUBJECT="üìù TestNG Suite Execution Summary"
          BODY="üìä Test Suite Execution Summary:\n‚úÖ Passed: ${PASSED:-0}\n‚ùå Failed: ${FAILED:-0}\n‚ö†Ô∏è Skipped: ${SKIPPED:-0}\nüìå Total: ${TOTAL:-0}\nüîó Allure Report: Attachments Included"

          echo -e "$BODY" | mail -s "$SUBJECT" -a "From: ${{ secrets.EMAIL_USERNAME }}" ${{ secrets.RECIPIENT_EMAIL }}

      - name: Send Google Chat Notification
        if: always()
        run: |
          echo "PASSED=$PASSED, FAILED=$FAILED, SKIPPED=$SKIPPED, TOTAL=$TOTAL"

          CHAT_MESSAGE="üì¢ *Test Suite Execution Summary* üì¢\n
          ‚úÖ *Passed:* ${PASSED:-0}\n
          ‚ùå *Failed:* ${FAILED:-0}\n
          ‚ö†Ô∏è *Skipped:* ${SKIPPED:-0}\n
          üìå *Total:* ${TOTAL:-0}\n
          üîó *Allure Report:* Attachments Included"

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"$CHAT_MESSAGE\"}" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK }}"
